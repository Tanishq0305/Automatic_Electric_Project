/*
 * Copyright (c) 2016, Freescale Semiconductor, Inc.
 * Copyright 2016-2019 NXP
 * All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

#include "fsl_device_registers.h"
#include "fsl_debug_console.h"
#include "pin_mux.h"
#include "board.h"
#include "fsl_adc.h"
#include "fsl_clock.h"
#include "fsl_power.h"
#include "fsl_ctimer.h"
#include <math.h>

#include <stdbool.h>
//extern rmsCalculation(long int buffer);
/*******************************************************************************
 * Definitions
 ******************************************************************************/
#define DEMO_ADC_BASE                  ADC
#define DEMO_ADC_SAMPLE_CHANNEL_NUMBER 7U
#define DEMO_ADC_IRQ_ID                ADC_SEQA_IRQn
#define DEMO_ADC_IRQ_HANDLER_FUNC      ADC_SEQA_IRQHandler
#define DEMO_ADC_CLOCK_SOURCE          kCLOCK_Fro
#define DEMO_ADC_CLOCK_DIVIDER         1U
static adc_result_info_t gAdcResultInfoStruct;


long int count =0;
unsigned long long  buffer =0;
int arr[4]= {0,0,0,0};
int arrlen =0;



adc_result_info_t *volatile gAdcResultInfoPtr = &gAdcResultInfoStruct;
volatile bool gAdcConvSeqAIntFlag;
const uint32_t g_Adc_12bitFullRange = 4096U;

/*******************************************************************************
 * Prototypes
 ******************************************************************************/
static void ADC_Configuration(void);


int rmsCalculation(int arr[4]){

	long long avg1 = arr[0]/256;
	long long avg2 = arr[1]/256;
	long long avg3 = arr[2]/256;
	long long avg4 = arr[3]/233;

	long long add = avg1 + avg2 + avg3 + avg4;
	PRINTF("add: %d\r\n",add );
	double squarert = sqrt((double)avg4);

//	int squarert_int = (int)(squarert * 10000);
	PRINTF("squarert: %f\r\n",squarert );
	return squarert;
}

int main(void)
{
    /* Initialize board hardware. */
    /* Attach 12 MHz clock to USART0 (debug console) */  CLOCK_Select(BOARD_DEBUG_USART_CLK_ATTACH);

    BOARD_InitBootPins();
    BOARD_InitBootClocks();
    BOARD_InitDebugConsole();

    /* Attach FRO clock to ADC0. */
    CLOCK_Select(kADC_Clk_From_Fro);
    CLOCK_SetClkDivider(kCLOCK_DivAdcClk, 1U);
    /* Power on ADC. */
    POWER_DisablePD(kPDRUNCFG_PD_ADC0);
    PRINTF("ADC interrupt example.\r\n");



    /* Configure the ADC as basic polling mode. */
    ADC_Configuration();

    /* Enable the interrupt. */
    /* Enable the interrupt the for sequence A done. */
    ADC_EnableInterrupts(DEMO_ADC_BASE, kADC_ConvSeqAInterruptEnable);
    NVIC_EnableIRQ(DEMO_ADC_IRQ_ID);

    PRINTF("Configuration Done.\r\n");
//    long long int buffer =0;
    ADC_DoSoftwareTriggerConvSeqA(DEMO_ADC_BASE);
    gAdcConvSeqAIntFlag = false;
    while (1)
    {
        while (!gAdcConvSeqAIntFlag)
        {

        }


        gAdcConvSeqAIntFlag = false;
        ADC_DoSoftwareTriggerConvSeqA(DEMO_ADC_BASE);
        if (count >1000){
//        	PRINTF("Buffer value at count %d = %d\r\n", count, buffer);
        	double rmsResult = rmsCalculation(arr[4]);
        	PRINTF("arr[0]: %d\r\n",arr[0]);
        	PRINTF("arr[1]: %d\r\n",arr[1]);
        	PRINTF("arr[2]: %d\r\n",arr[2]);
        	PRINTF("arr[3]: %d\r\n",arr[3]);
//        	PRINTF(".......................................................\r\n");
//        	PRINTF("I have done 100000 readings and buffer value is: %d\r\n", buffer);
//        	buffer = 0;
//        	PRINTF(".......................................................\r\n");
//        	PRINTF("I have done 100000 readings........\r\n");
//        	PRINTF("result= %d\r\n", rmsReult);
//        	PRINTF(".......................................................\r\n");
//        	count =0;


//        	 double rmsResult = rmsCalculation(buffer);
//        	 PRINTF("The output at count0 is: = %d\r\n",buf);
        	 PRINTF("RMS value after 1000 readings: %d\r\n", rmsResult);

        	 count = 0;
        	 arrlen =0;
//        	 arr[1] = buffer/256;
        	 buffer = 0;
        }


//        PRINTF("result= %d\r\n", gAdcResultInfoStruct.result);
//        PRINTF("channelNo.= %d\r\n", gAdcResultInfoStruct.channelNumber);
//        PRINTF("OverrunFlag= %d\r\n", gAdcResultInfoStruct.overrunFlag ? 1U : 0U);
//        PRINTF("\r\n");
    }
}

/*
 * ISR for ADC conversion sequence A done.
 */
void DEMO_ADC_IRQ_HANDLER_FUNC(void)
{

    if (kADC_ConvSeqAInterruptFlag == (kADC_ConvSeqAInterruptFlag & ADC_GetStatusFlags(DEMO_ADC_BASE)))
    {
        ADC_GetChannelConversionResult(DEMO_ADC_BASE, DEMO_ADC_SAMPLE_CHANNEL_NUMBER, gAdcResultInfoPtr);
        buffer  += gAdcResultInfoStruct.result *  gAdcResultInfoStruct.result;
        ADC_ClearStatusFlags(DEMO_ADC_BASE, kADC_ConvSeqAInterruptFlag);
        gAdcConvSeqAIntFlag = true;
//        PRINTF("The output at count %d is: = %d\r\n", count , buffer);
        if (count == 255 || count == 511 ||count ==  767 || count == 1000){
//        	int i=0;
        	arr[arrlen] = buffer;
        	PRINTF("The output at count %d is: = %d\r\n", count , buffer);
        	buffer =0;
        	arrlen++;
        	count++;
        }
        else{
        	 count++;
        }
//        PRINTF("RMS value after 1000 readings: %d\r\n", rmsResult);

    }
    SDK_ISR_EXIT_BARRIER;
}

/*
 * Configure the ADC as normal converter in polling mode.
 */
void ADC_Configuration(void)
{
    adc_config_t adcConfigStruct;
    adc_conv_seq_config_t adcConvSeqConfigStruct;

/* Configure the converter. */
                                                   /* FSL_FEATURE_ADC_HAS_CTRL_ASYNMODE */
    adcConfigStruct.clockDividerNumber = DEMO_ADC_CLOCK_DIVIDER;

#if defined(FSL_FEATURE_ADC_HAS_CTRL_LPWRMODE) & FSL_FEATURE_ADC_HAS_CTRL_LPWRMODE
    adcConfigStruct.enableLowPowerMode = false;
#endif /* FSL_FEATURE_ADC_HAS_CTRL_LPWRMODE */

    ADC_Init(DEMO_ADC_BASE, &adcConfigStruct);

    /* Enable channel DEMO_ADC_SAMPLE_CHANNEL_NUMBER's conversion in Sequence A. */
    adcConvSeqConfigStruct.channelMask =
        (1U << DEMO_ADC_SAMPLE_CHANNEL_NUMBER); /* Includes channel DEMO_ADC_SAMPLE_CHANNEL_NUMBER. */
    adcConvSeqConfigStruct.triggerMask      = 0U;
    adcConvSeqConfigStruct.triggerPolarity  = kADC_TriggerPolarityPositiveEdge;
    adcConvSeqConfigStruct.enableSingleStep = false;
    adcConvSeqConfigStruct.enableSyncBypass = false;
    adcConvSeqConfigStruct.interruptMode    = kADC_InterruptForEachSequence;
    ADC_SetConvSeqAConfig(DEMO_ADC_BASE, &adcConvSeqConfigStruct);
    ADC_EnableConvSeqA(DEMO_ADC_BASE, true); /* Enable the conversion sequence A. */
    /* Clear the result register. */
    ADC_DoSoftwareTriggerConvSeqA(DEMO_ADC_BASE);
    while (!ADC_GetChannelConversionResult(DEMO_ADC_BASE, DEMO_ADC_SAMPLE_CHANNEL_NUMBER, &gAdcResultInfoStruct))
    {
    }
    ADC_GetConvSeqAGlobalConversionResult(DEMO_ADC_BASE, &gAdcResultInfoStruct);
}
